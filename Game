import javax.swing.*;
import java.awt.*;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class Game extends JPanel {
    private static final long serialVersionUID = 1L;
    private boolean playerTurn = true;
    private Player bluePlayer;
    private Player redPlayer;
    private final Board board;
    private JLabel turnLabel;
    private JLabel blueScoreLabel;
    private JLabel redScoreLabel;
    private int blueSOSCount = 0;
    private int redSOSCount = 0;
    private boolean modeS = true;

    private JRadioButton sButton;
    private JRadioButton oButton;
    private JRadioButton blueHumanButton;
    private JRadioButton blueComputerButton;
    private JRadioButton redHumanButton;
    private JRadioButton redComputerButton;

    public Game() {
        setLayout(new BorderLayout());
        JPanel selectionPanel = createSymbolSelectionPanel();
        JPanel playerTypePanel = createPlayerTypeSelectionPanel();
        JPanel infoPanel = setupInfoPanel();
        board = new Board(takeGameInfo(), this);
        add(board, BorderLayout.CENTER);
        add(selectionPanel, BorderLayout.SOUTH);
        add(playerTypePanel, BorderLayout.WEST);
        add(infoPanel, BorderLayout.NORTH);
        initializePlayers();
    }

    private JPanel createSymbolSelectionPanel() {
        JPanel panel = new JPanel(new FlowLayout());
        sButton = new JRadioButton("S");
        oButton = new JRadioButton("O");
        sButton.setSelected(true);
        ButtonGroup symbolGroup = new ButtonGroup();
        symbolGroup.add(sButton);
        symbolGroup.add(oButton);
        panel.add(new JLabel("Select Symbol:"));
        panel.add(sButton);
        panel.add(oButton);
        return panel;
    }

    private JPanel createPlayerTypeSelectionPanel() {
        JPanel panel = new JPanel(new GridLayout(3, 2));
        blueHumanButton = new JRadioButton("Blue: Human");
        blueComputerButton = new JRadioButton("Blue: Computer");
        redHumanButton = new JRadioButton("Red: Human");
        redComputerButton = new JRadioButton("Red: Computer");
        blueHumanButton.setSelected(true);
        redComputerButton.setSelected(true);
        ButtonGroup blueGroup = new ButtonGroup();
        blueGroup.add(blueHumanButton);
        blueGroup.add(blueComputerButton);
        ButtonGroup redGroup = new ButtonGroup();
        redGroup.add(redHumanButton);
        redGroup.add(redComputerButton);
        panel.add(new JLabel("Player Types:"));
        panel.add(new JLabel(""));
        panel.add(blueHumanButton);
        panel.add(blueComputerButton);
        panel.add(redHumanButton);
        panel.add(redComputerButton);
        return panel;
    }

    private void initializePlayers() {
        bluePlayer = blueHumanButton.isSelected() ? new HumanPlayer("Blue Player", this) : new ComputerPlayer("Blue Player", this);
        redPlayer = redHumanButton.isSelected() ? new HumanPlayer("Red Player", this) : new ComputerPlayer("Red Player", this);
    }

    public String getCurrentPlayerSymbol() {
        if (!getCurrentPlayer().isComputerPlayer()) {
            return sButton.isSelected() ? "S" : "O";
        }
        return calculateOptimalSymbolForComputer();
    }

    public Player getCurrentPlayer() {
        return playerTurn ? bluePlayer : redPlayer;
    }

    private String calculateOptimalSymbolForComputer() {
        return new Random().nextBoolean() ? "S" : "O";
    }

    private JPanel setupInfoPanel() {
        JPanel infoPanel = new JPanel(new GridLayout(2, 1));
        turnLabel = new JLabel("Current Player: Blue");
        infoPanel.add(turnLabel);
        blueScoreLabel = new JLabel("Blue SOS: 0");
        redScoreLabel = new JLabel("Red SOS: 0");
        infoPanel.add(blueScoreLabel);
        infoPanel.add(redScoreLabel);
        JButton startButton = new JButton("Start");
        startButton.addActionListener(e -> startGame());
        infoPanel.add(startButton);
        return infoPanel;
    }

    private int takeGameInfo() {
        String boardSize = (String) JOptionPane.showInputDialog(
            this,
            "Choose the board size",
            "Board Size",
            JOptionPane.QUESTION_MESSAGE,
            null,
            new String[]{"3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"},
            "8"
        );

        if (boardSize == null) {
            System.exit(0);
        }

        String[] gameModes = {"Simple", "General"};
        int gameModeChoice = JOptionPane.showOptionDialog(
            this,
            "Choose the game mode",
            "Game Mode",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            gameModes,
            gameModes[0]
        );
        modeS = gameModeChoice == 0;

        return Integer.parseInt(boardSize);
    }

    private void startGame() {
        resetGame();
        initializePlayers();
        if (bluePlayer.isComputerPlayer() && redPlayer.isComputerPlayer()) {
            autoPlayBetweenComputers();
        } else if (bluePlayer.isComputerPlayer()) {
            bluePlayer.makeMove();
        }
    }

    public void processMove(int i, int j, String symbol) {
        if (board.checkForSOS(i, j, symbol)) {
            if (modeS) {
                playerWon(getCurrentPlayer().getName());
                return;
            } else {
                if (playerTurn) {
                    incrementBlueScore();
                } else {
                    incrementRedScore();
                }
            }
        }

        if (isBoardFull()) {
            if (modeS) {
                JOptionPane.showMessageDialog(this, "It's a draw!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                resetGame();
            } else {
                endGeneralModeGame();
            }
            return;
        }

        alterTurn();
    }

    public void makeComputerMove() {
        Random random = new Random();
        int size = board.getBoardSize();
        String symbol = getCurrentPlayerSymbol();
        boolean moveMade = false;

        while (!moveMade) {
            int i = random.nextInt(size);
            int j = random.nextInt(size);
            if (board.getBoardLabels()[i][j].getText().isEmpty()) {
                board.getBoardLabels()[i][j].setText(symbol);
                moveMade = true;
                processMove(i, j, symbol);
            }
        }
    }

    private void autoPlayBetweenComputers() {
        new Thread(() -> {
            while (!isBoardFull()) {
                getCurrentPlayer().makeMove();
                try {
                    TimeUnit.SECONDS.sleep(1);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            if (!modeS) {
                endGeneralModeGame();
            }
        }).start();
    }

    private void incrementBlueScore() {
        blueSOSCount++;
        blueScoreLabel.setText("Blue SOS: " + blueSOSCount);
    }

    private void incrementRedScore() {
        redSOSCount++;
        redScoreLabel.setText("Red SOS: " + redSOSCount);
    }

    private void alterTurn() {
        playerTurn = !playerTurn;
        turnLabel.setText(playerTurn ? "Current Player: Blue" : "Current Player: Red");

        if (getCurrentPlayer().isComputerPlayer()) {
            getCurrentPlayer().makeMove();
        }
    }

    public void playerWon(String playerName) {
        String message = playerName + " won with an SOS!";
        JOptionPane.showMessageDialog(this, message, "Game Over", JOptionPane.INFORMATION_MESSAGE);
        resetGame();
    }

    private void resetGame() {
        playerTurn = true;
        blueSOSCount = 0;
        redSOSCount = 0;
        turnLabel.setText("Current Player: Blue");
        blueScoreLabel.setText("Blue SOS: 0");
        redScoreLabel.setText("Red SOS: 0");

        for (int i = 0; i < board.getBoardSize(); i++) {
            for (int j = 0; j < board.getBoardSize(); j++) {
                board.getBoardLabels()[i][j].setText("");
            }
        }
    }

    private boolean isBoardFull() {
        for (BoardLabel[] row : board.getBoardLabels()) {
            for (BoardLabel label : row) {
                if (label.getText().isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private void endGeneralModeGame() {
        String message;
        if (blueSOSCount > redSOSCount) {
            message = "Blue Player wins with " + blueSOSCount + " SOS patterns!";
        } else if (redSOSCount > blueSOSCount) {
            message = "Red Player wins with " + redSOSCount + " SOS patterns!";
        } else {
            message = "It's a draw! Both players completed " + blueSOSCount + " SOS patterns.";
        }
        JOptionPane.showMessageDialog(this, message, "Game Over", JOptionPane.INFORMATION_MESSAGE);
        resetGame();
    }
}
